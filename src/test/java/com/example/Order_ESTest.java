/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 12 20:13:34 GMT 2024
 */

package com.example;

import org.junit.Test;
import static org.junit.Assert.*;
import com.example.Order;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Order_ESTest extends Order_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Order order0 = new Order(1, 1, 1);
      order0.addItems(1);
      order0.removeItems(1);
      assertEquals(1.0, order0.calculateTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Order order0 = new Order(1, 1, 1);
      order0.removeItems(0);
      assertEquals(1.0, order0.calculateTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Order order0 = new Order(1, 1, 1);
      order0.addItems((-1));
      assertEquals(1.0, order0.calculateTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Order order0 = new Order(0, 0, (-2421.0));
      int int0 = order0.getNumberOfItems();
      assertEquals(-0.0, order0.calculateTotal(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Order order0 = new Order(1, 1, 1);
      int int0 = order0.getNumberOfItems();
      assertEquals(1.0, order0.calculateTotal(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Order order0 = new Order(1404, 0, 1404);
      double double0 = order0.calculateTotal();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Order order0 = new Order(1, 1, 1);
      double double0 = order0.calculateTotal();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Order order0 = new Order(0, 0, (-2421.0));
      double double0 = order0.applyDiscount((-3649));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Order order0 = new Order(1404, 0, 1404);
      order0.addItems(1404);
      double double0 = order0.applyDiscount(1404);
      assertEquals(1971216.0, order0.calculateTotal(), 0.01);
      assertEquals(1404.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Order order0 = new Order(1, 1, 1);
      assertEquals(1.0, order0.calculateTotal(), 0.01);
      
      order0.removeItems(1);
      assertEquals(0.0, order0.calculateTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Order order0 = new Order(0, (-1243), 246.0);
      order0.removeItems(2124);
      assertEquals((-305778.0), order0.calculateTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Order order0 = new Order(0, (-1243), 246.0);
      order0.removeItems((-775));
      assertEquals((-305778.0), order0.calculateTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Order order0 = new Order(0, (-1243), 246.0);
      order0.addItems(0);
      assertEquals((-305778.0), order0.calculateTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Order order0 = new Order(0, (-1243), 246.0);
      double double0 = order0.applyDiscount(0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertEquals((-305778.0), order0.calculateTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Order order0 = new Order(0, (-1243), 246.0);
      int int0 = order0.getNumberOfItems();
      assertEquals((-1243), int0);
      assertEquals((-305778.0), order0.calculateTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Order order0 = new Order(0, (-1243), 246.0);
      double double0 = order0.calculateTotal();
      assertEquals((-305778.0), double0, 0.01);
  }
}
